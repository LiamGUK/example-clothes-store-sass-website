.slideshow {
  grid-column: 1 / -1;
  grid-row: 2 / 3;
  position: relative;
  width: 100%;
  height: 80vh;

  @include response(xl) {
    height: 70vh;
  }

  @include response(lg) {
    height: 60vh;
  }

  @include response(md) {
    height: 50vh;
  }

  &-slide {
    position: absolute;
    top: 0;
    left: 0;
    width: inherit;
    height: inherit;
    visibility: hidden;
    opacity: 0;
    animation: slideshow 20s linear infinite;

    img {
      width: inherit;
      height: inherit;
      object-fit: cover;
    }
  }

  &-content {
    background-color: rgba(color(secondary), 0.9);
    position: absolute;
    bottom: 6rem;
    left: 6rem;
    right: 6rem;
    max-width: 40rem;
    padding: 5rem;

    @include response(lg) {
      padding: 2rem;
    }

    h2 {
      font-size: size(xl) + 1.2rem;
      color: color(primary);
    }

    p {
      margin: 1rem 0;
      font-size: size(sm);
    }
  }
}

// .slideshow-slide:nth-child(1) {
//   animation-delay: 0s;
// }
// .slideshow-slide:nth-child(2) {
//   animation-delay: 4s;
// }
// .slideshow-slide:nth-child(3) {
//   animation-delay: 8s;
// }
// .slideshow-slide:nth-child(4) {
//   animation-delay: 12s;
// }
// .slideshow-slide:nth-child(5) {
//   animation-delay: 16s;
// }

// Use each loop to replicate same method as above but more concise way.
$animList: 1 0s, 2 4s, 3 8s, 4 12s, 5 16s;

@each $item in $animList {
  // nth() = built in interpolation method to grab specific value from list - #{nth($item, 1)} will grab the first value from animList list (1,2,3,4,5) to use to assign nth-child value.
  .slideshow-slide:nth-child(#{nth($item, 1)}) {
    // nth($item, 2) = will grab will second values from animList list (times values) and will assign to delay.
    animation-delay: nth($item, 2);
  }
}

@keyframes slideshow {
  0%,
  20%,
  100% {
    visibility: hidden;
    opacity: 0;
  }
  2%,
  18% {
    visibility: visible;
    opacity: 1;
  }
}
